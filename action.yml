name: Deploy Docker Container

description: >
  Deploy a Docker container using ECR images with configurable environment variables and options.

inputs:
  host:
    description: "Host for SSH connection."
    required: false
    default: "github-actions"
  aws-account-number:
    description: "AWS account number."
    required: true
  aws-ecr-region:
    description: "AWS ECR region."
    required: true
  aws-ecr-repository:
    description: "The AWS ECR repository name."
    required: true
  ecr-image-tag:
    description: "ECR image (tag) to be deployed"
    required: false
    default: "latest"
  app-container-name:
    description: "Name of the Docker container."
    required: true
  app-port-mapping:
    description: "Port mapping for the Docker container."
    required: false
  app-network:
    description: "Network for the Docker container."
    required: false
    default: "vps"
  app-container-ip:
    description: "IP address for the Docker container."
    required: false
  app-env-file:
    description: "Environment file data."
    required: false
  app-docker-run-options:
    description: "Additional options for Docker run command."
    required: false

runs:
  using: "composite"
  steps:
    - name: Deploy Docker Container
      shell: bash
      env:
        ECR_HOST_URL: ${{ inputs.aws-account-number }}.dkr.ecr.${{ inputs.aws-ecr-region }}.amazonaws.com
        ECR_REPOSITORY_URL: ${{ inputs.aws-account-number }}.dkr.ecr.${{ inputs.aws-ecr-region }}.amazonaws.com/${{ inputs.aws-ecr-repository }}:${{ inputs.ecr-image-tag }}
      run: |
        ssh -F "./.tmp/.ssh/config" ${{ inputs.host }} << 'EOF'
          aws ecr get-login-password --region ${{ inputs.aws-ecr-region }} \
            | docker login --username AWS --password-stdin ${{ env.ECR_HOST_URL }}

          docker pull ${{ env.ECR_REPOSITORY_URL }}

          docker stop ${{ inputs.app-container-name }} 2> /dev/null
          docker rm ${{ inputs.app-container-name }} 2> /dev/null

          ENV_FILE='/tmp/.env.docker'

          # Handle app-env-file
          DOCKER_ENV_OPTION=""
          if [[ -n "${{ inputs.app-env-file }}" ]]; then
            echo ${{ inputs.app-env-file }} > $ENV_FILE
            DOCKER_ENV_OPTION="--env-file $ENV_FILE"
          fi

          # Handle port mapping
          DOCKER_PORT_OPTION=""
          if [[ -n "${{ inputs.app-port-mapping }}" ]]; then
            echo ${{ inputs.app-port-mapping }} > $ENV_FILE
            DOCKER_PORT_OPTION="-p ${{ inputs.app-port-mapping }}"
          fi

          # Handle network
          DOCKER_NETWORK_OPTION=""
          if [[ -n "${{ inputs.app-network }}" ]]; then
            echo ${{ inputs.app-network }} > $ENV_FILE
            DOCKER_NETWORK_OPTION="--network ${{ inputs.app-network }}"
          fi

          # Handle app-docker-run-options
          DOCKER_RUN_OPTIONS="${{ inputs.app-docker-run-options }}"

          # Handle app-container-ip
          DOCKER_IP_OPTION=""
          if [[ -n "${{ inputs.app-container-ip }}" ]]; then
            DOCKER_IP_OPTION="--ip ${{ inputs.app-container-ip }}"
          fi

          docker run -d \
            --name ${{ inputs.app-container-name }} \
            $DOCKER_PORT_OPTION \
            $DOCKER_NETWORK_OPTION \
            $DOCKER_ENV_OPTION \
            $DOCKER_IP_OPTION \
            $DOCKER_RUN_OPTIONS \
            ${{ env.ECR_REPOSITORY_URL }}
          
          echo "" > $ENV_FILE
        EOF
